on:
  push:
    branches:
    #  - '**'
      - main
    # paths:
    #   - "apps/*/supabase/**"
jobs:
  # test-root-workflow:
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: dev
  #   steps:
  #     - name: Test
  #       run: bash --version

  changes:
    # if: ${{ false }}
    uses: ./.github/workflows/_changes.yml

  test-changed-files:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.account == 'true' }}
    outputs:
      apps: ${{ steps.changed-dirs-js.outputs.result }}
    steps:
      - run: exit 0
  #     - uses: 'actions/checkout@v4'
  #     - name: Run changed-files with dir_names
  #       id: changed-files-dir-names
  #       uses: tj-actions/changed-files@v45
  #       with:
  #         files: |
  #           apps/*/supabase/**
  #         dir_names: "true"
  #         separator: ","
  #     - name: List all changed dirs
  #       id: changed-dirs
  #       env:
  #         DIRS: ${{ steps.changed-files-dir-names.outputs.all_changed_files }}
  #       run: |
  #         for DIR in ${DIRS}; do
  #           SEGMENT=$(echo "$DIR" | cut -d'/' -f2)
  #           RESULT+=("$SEGMENT")
  #           echo "$SEGMENT was changed"
  #         done
  #         UNIQUE_RESULT=($(echo "${RESULT[@]}" | tr ' ' '\n' | sort -u))
  #         echo "apps="$(jq -c -n '$ARGS.positional' --args "${RESULT[@]}")
  #         echo "unique_apps="$(jq -c -n '$ARGS.positional' --args "${UNIQUE_RESULT[@]}")
  #         echo "apps="$(jq -c -n '$ARGS.positional' --args "${UNIQUE_RESULT[@]}") >> $GITHUB_OUTPUT

  #     - name: List all changed dirs js
  #       id: changed-dirs-js
  #       env:
  #         DIRS: ${{ steps.changed-files-dir-names.outputs.all_changed_files }}
  #       uses: actions/github-script@v7
  #       with:
  #         script: |
  #           const affected = process.env.DIRS ? process.env.DIRS.split(',').map(app => app.trim().split('/')[1]) : []; // get path segments corresponding to the app
  #           const apps = [...new Set(affected)] // get unique values only
  #           return JSON.stringify(apps);

  #         result-encoding: string

  deploy-dev:
    needs: [changes, test-changed-files]
    # if: ${{ needs.test-changed-files.outputs.apps != '[]' && needs.test-changed-files.outputs.apps != '' }}
    # strategy:
    #   matrix:
    #     app: ${{ fromJson(needs.test-changed-files.outputs.apps) }}
    if: ${{ !failure() }}
    secrets: inherit
    uses: ./.github/workflows/_deploy.yml
    with:
      environment: dev-test #${{ matrix.app }}
      dir: apps/account #${{ matrix.app }}
      skip: ${{ needs.changes.outputs.exam == 'true' }}
